/tmp/tmpXX4bIbQA.asm:
     1                          MODULE spec_crt0_asm
     2                          LINE 0, "/home/jorgegv/src/spectrum/z88dk/lib/config//../..//lib/target/zx/classic/spec_crt0.asm"
/home/jorgegv/src/spectrum/z88dk/lib/config//../..//lib/target/zx/classic/spec_crt0.asm:
                                
     1                          ;       Options:
     2                          ;          startup=1  --> RAM mode
     3                          ;          startup=2  --> ROM mode (position code at location 0 and provide minimal interrupt services)
     4                          ;
     5                          ;          CRT_ORG_CODE = start address
     6                          ;          CRT_ORG_BSS = address for bss variables
     7                          ;          CRT_MODEL   = 0 (RAM), 1 = (ROM, code copied), 2 = (ROM, code compressed)
     8                          ;
     9                          ;       djm 18/5/99
    10                          ;
    11                          ;       $Id: spec_crt0.asm,v 1.53 2016-07-16 07:06:27 dom Exp $
    12                          ;
    13                          
    14                          
    15                              MODULE  zx82_crt0
    16                          
    17                              defc    crt0 = 1
    18                              INCLUDE "zcc_opt.def"
/tmp/tmpzccXXrQnW5D/zcc_opt.def:
     1                          
     2                          IF !DEFINED_startup
     3                          	defc	DEFINED_startup = 1
     4                          	defc startup = 31
     5                          	IFNDEF startup
     6                          	ENDIF
     7                          ENDIF
     8                          
     9                          
/home/jorgegv/src/spectrum/z88dk/lib/config//../..//lib/target/zx/classic/spec_crt0.asm:
    19                          
    20                          
    21                              EXTERN    _main           ; main() is always external to crt0 code
    22                              PUBLIC    cleanup         ; jp'd to by exit()
    23                              PUBLIC    l_dcal          ; jp(hl)
    24                              PUBLIC    call_rom3       ; Interposer
    25                          
    26                          
    27                              PUBLIC  __SYSVAR_BORDCR
    28                              defc    __SYSVAR_BORDCR = 23624
    29                          
    30                          
    31                              IF DEFINED_ZXVGS
    32                                  IF !DEFINED_CRT_ORG_CODE
    33                                      defc    CRT_ORG_CODE = $5CCB     ; repleaces BASIC program
    34                                      defc	DEFINED_CRT_ORG_CODE = 1
    35                                  ENDIF
    36                                  defc TAR__register_sp = 0xff57	; below UDG, keep eye when using banks
    37                              ENDIF
    38                          
    39                          
    40                              PUBLIC    _FRAMES
    41                              IF startup != 2
    42                                      defc  _FRAMES = 23672 ; Timer
    43                              ENDIF
    44                          
    45                              IF      !DEFINED_CRT_ORG_CODE
    46                                  IF (startup=2)                 ; ROM ?
    47                                      defc    CRT_ORG_CODE  = 0
    48                                      defc    TAR__register_sp = 32767
    49                                  ELSE
    50                                      IF DEFINED_CRT_TS2068_HRG
    51                                          defc    CRT_ORG_CODE  = 40000
    52                                      ELSE
    53                                          defc    CRT_ORG_CODE  = 32768
    54                                      ENDIF
    55                                  ENDIF
    56                              ENDIF
    57                          
    58                              ; We default to the 64 column terminal driver
    59                              ; Check whether to default to 32 column display
    60                              defc    CONSOLE_ROWS = 24
    61                              IF DEFINED_CLIB_DEFAULT_SCREEN_MODE && __TS2068__
    62                                  IF DEFINED_CLIB_ZX_CONIO32
    63                                     defc BASE_COLS = 32
    64                                  ELSE
    65                                     defc CLIB_ZX_CONIO32 = 0
    66                                     defc BASE_COLS = 64
    67                                  ENDIF
    68                                  IF CLIB_DEFAULT_SCREEN_MODE < 6
    69                                     defc CONSOLE_COLUMNS = BASE_COLS
    70                                  ELSE
    71                                     ; Hires mode
    72                                     defc CONSOLE_COLUMNS = BASE_COLS * 2
    73                                  ENDIF
    74                              ELIF !DEFINED_CLIB_ZX_CONIO32
    75                                  defc CLIB_ZX_CONIO32 = 0
    76                                  defc CONSOLE_COLUMNS = 64
    77                              ELSE
    78                                  defc CONSOLE_COLUMNS = 32
    79                              ENDIF
    80                              PUBLIC __CLIB_ZX_CONIO32
    81                              defc __CLIB_ZX_CONIO32 = CLIB_ZX_CONIO32
    82                          
    83                              IFNDEF CLIB_FGETC_CONS_DELAY
    84                                  defc CLIB_FGETC_CONS_DELAY = 100
    85                              ENDIF
    86                          
    87                              ; We use the generic driver by default
    88                              defc    TAR__fputc_cons_generic = 1
    89                          
    90                              defc    DEF__register_sp = -1
    91                              defc    TAR__clib_exit_stack_size = 32
    92                              defc    CRT_KEY_DEL = 12
    93                              defc    __CPU_CLOCK = 3500000
    94                              INCLUDE "crt/classic/crt_rules.inc"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_rules.inc:
     1                          
     2                          ; Rules for setting up defaults for configuring the build
     3                          
     4                          
     5                             IFNDEF CRT_INITIALIZE_BSS
     6                                defc CRT_INITIALIZE_BSS = 1
     7                             ENDIF
     8                          
     9                             IFDEF REGISTER_SP
    10                                defc __register_sp = REGISTER_SP
    11                             ELSE
    12                                IFDEF STACKPTR
    13                                   defc __register_sp = STACKPTR
    14                                ELSE
    15                                   IFDEF TAR__register_sp
    16                                      defc __register_sp = TAR__register_sp
    17                                   ELSE
    18                                      defc __register_sp = DEF__register_sp
    19                                   ENDIF
    20                                ENDIF
    21                             ENDIF
    22                          
    23                             IFNDEF TAR__crt_enable_rst
    24                                 defc TAR__crt_enable_rst = 0x0000
    25                             ENDIF
    26                          
    27                             IFDEF CRT_ENABLE_RST
    28                                defc __crt_enable_rst = CRT_ENABLE_RST | TAR__crt_enable_rst
    29                             ELSE
    30                                defc __crt_enable_rst = TAR__crt_enable_rst
    31                             ENDIF
    32                          
    33                             IFDEF CRT_ENABLE_NMI
    34                                defc __crt_enable_nmi = CRT_ENABLE_NMI
    35                             ELSE
    36                               IFNDEF TAR__crt_enable_nmi
    37                                  defc TAR__crt_enable_nmi = 0
    38                               ENDIF
    39                               defc __crt_enable_nmi = TAR__crt_enable_nmi
    40                             ENDIF
    41                          
    42                             ; By default we want to have stdio working for us
    43                             IFNDEF CRT_ENABLE_STDIO
    44                                 defc CRT_ENABLE_STDIO = 1
    45                             ENDIF
    46                          
    47                             IFDEF CLIB_EXIT_STACK_SIZE
    48                                defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
    49                             ELSE
    50                                IFDEF TAR__clib_exit_stack_size
    51                                   defc __clib_exit_stack_size = TAR__clib_exit_stack_size
    52                                ELSE
    53                                   defc __clib_exit_stack_size = DEF__clib_exit_stack_size
    54                                ENDIF
    55                             ENDIF
    56                          
    57                             ; For each bank call we save 2 words on the temporary stack
    58                             ; this controls the depth of calls we can make safely
    59                             IFNDEF CLIB_BANKING_STACK_SIZE
    60                                PUBLIC CLIB_BANKING_STACK_SIZE
    61                                IFDEF TAR__clib_banking_stack_size
    62                                   defc CLIB_BANKING_STACK_SIZE = TAR__clib_banking_stack_size
    63                                ELSE
    64                                   defc CLIB_BANKING_STACK_SIZE = 100
    65                                ENDIF
    66                             ENDIF
    67                          
    68                          
    69                             PUBLIC __CRT_KEY_DEL
    70                             IFDEF CRT_KEY_DEL
    71                               defc __CRT_KEY_DEL = CRT_KEY_DEL
    72                             ELSE
    73                               defc __CRT_KEY_DEL = 8
    74                             ENDIF
    75                          
    76                             PUBLIC __CRT_KEY_CAPS_LOCK
    77                             IFDEF CRT_KEY_CAPS_LOCK
    78                               defc __CRT_KEY_CAPS_LOCK  = CRT_KEY_CAPS_LOCK
    79                             ELSE
    80                               defc __CRT_KEY_CAPS_LOCK = 6
    81                             ENDIF
    82                          
    83                             PUBLIC __CPU_CLOCK
    84                             IFNDEF __CPU_CLOCK
    85                               defc __CPU_CLOCK = 3500000
    86                             ENDIF
    87                          
    88                             PUBLIC __CLIB_CONIO_NATIVE_COLOUR
    89                             IFDEF CLIB_CONIO_NATIVE_COLOUR
    90                               defc __CLIB_CONIO_NATIVE_COLOUR = CLIB_CONIO_NATIVE_COLOUR
    91                             ELSE
    92                               defc __CLIB_CONIO_NATIVE_COLOUR = 0
    93                             ENDIF
    94                          
    95                             ; When using the firmware printer we may need to disable the soft
    96                             ; cursor created by fgets_cons()
    97                             PUBLIC __CLIB_DISABLE_FGETS_CURSOR
    98                             IFDEF CLIB_DISABLE_FGETS_CURSOR
    99                               defc __CLIB_DISABLE_FGETS_CURSOR = CLIB_DISABLE_FGETS_CURSOR
   100                             ELSE
   101                               defc __CLIB_DISABLE_FGETS_CURSOR = 0
   102                             ENDIF
   103                          
   104                             ; Delay when entering fgetc_cons()
   105                             ; 50ms stops rogue repeats nicely, but may need tuning
   106                             PUBLIC __CLIB_FGETC_CONS_DELAY
   107                             IFDEF CLIB_FGETC_CONS_DELAY
   108                               defc __CLIB_FGETC_CONS_DELAY = CLIB_FGETC_CONS_DELAY
   109                             ELSE
   110                               defc __CLIB_FGETC_CONS_DELAY = 50
   111                             ENDIF
   112                          
   113                             ; Delay when kbhit/getch() returns a cached key press
   114                             ; Delaying slightly means that typing is possible
   115                             PUBLIC __CLIB_KBHIT_DELAY
   116                             IFDEF CLIB_KBHIT_DELAY
   117                               defc __CLIB_KBHIT_DELAY = CLIB_KBHIT_DELAY
   118                             ELSE
   119                               defc __CLIB_KBHIT_DELAY = 0
   120                             ENDIF
   121                          
   122                             ; Some ports (looking at you tiki100) need to have graphics routines stored out
   123                             ; of paging harm. Normally we'd just use code_driver and keep the routines close
   124                             ; the start of the address space. However for tiki100, we need them at the end,
   125                             ; (in this case > 32768)
   126                             IF DEFINED_CRT_ORG_GRAPHICS
   127                                 defc __crt_org_graphics = CRT_ORG_GRAPHICS
   128                             ENDIF
   129                          
   130                             ; If 32 bit floats are defined, then we need to indicate to the library
   131                             ; that they are in use (mainly for printf/scanf)
   132                             PUBLIC CLIB_32BIT_FLOATS
   133                             IF !DEFINED_CLIB_32BIT_FLOATS
   134                                 defc CLIB_32BIT_FLOATS = 0
   135                             ENDIF
   136                             PUBLIC CLIB_64BIT_FLOATS
   137                             IF !DEFINED_CLIB_64BIT_FLOATS
   138                                 defc CLIB_64BIT_FLOATS = 0
   139                             ENDIF
   140                          
   141                             ; Some targets startup in different screen modes depending on the environment:
   142                             ; eg native = 40columns, CP/M = 80 columns. These should be explicitly defined
   143                             ; if needed. So default to an unused value if not
   144                             PUBLIC CLIB_DEFAULT_SCREEN_MODE
   145                             IFNDEF CLIB_DEFAULT_SCREEN_MODE
   146                                 defc CLIB_DEFAULT_SCREEN_MODE = 0
   147                             ENDIF
   148                          
   149                              ; Maximum number of FILEs available
   150                              IF !DEFINED_CLIB_FOPEN_MAX
   151                                  DEFC    CLIB_FOPEN_MAX = 10
   152                              ENDIF
   153                              PUBLIC  __FOPEN_MAX
   154                              defc    __FOPEN_MAX = CLIB_FOPEN_MAX
   155                          
   156                              ; Maximum number of fds available
   157                              IF !DEFINED_CLIB_OPEN_MAX
   158                                  ; Map this old nofileio pragma into a modern form
   159                                  IF DEFINED_nofileio
   160                                      defc    CLIB_OPEN_MAX = 0
   161                                  ELSE
   162                                      defc    CLIB_OPEN_MAX = CLIB_FOPEN_MAX
   163                                  ENDIF
   164                              ENDIF
   165                              PUBLIC  __CLIB_OPEN_MAX
   166                              defc    __CLIB_OPEN_MAX = CLIB_OPEN_MAX
   167                          
   168                             ; By default allow the command line options if available on the target/subtype
   169                             IF !DEFINED_CRT_ENABLE_COMMANDLINE
   170                                IFDEF TAR__CRT_ENABLE_COMMANDLINE
   171                                    defc CRT_ENABLE_COMMANDLINE = TAR__CRT_ENABLE_COMMANDLINE
   172                                ELSE
   173                                    defc CRT_ENABLE_COMMANDLINE = 1
   174                                ENDIF
   175                             ENDIF
   176                          
   177                          
   178                             ; Map this old pragma into a "modern" name
   179                             IF DEFINED_nostreams
   180                                 defc CRT_COMMANDLINE_REDIRECTION = 0
   181                             ELIF !DEFINED_CRT_COMMANDLINE_REDIRECTION
   182                                 ; File redirection on command line arguments can only happen
   183                                 ; if stdio is enabled
   184                                 IF CRT_ENABLE_STDIO = 1
   185                                     defc CRT_COMMANDLINE_REDIRECTION = 1
   186                                 ELSE
   187                                     defc CRT_COMMANDLINE_REDIRECTION = 0
   188                                 ENDIF
   189                             ENDIF
   190                          
   191                             ; Block size for the gendos library
   192                             IF !DEFINED_CLIB_RND_BLOCKSIZE
   193                                DEFC    CLIB_RND_BLOCKSIZE = 1000
   194                             ENDIF
   195                             PUBLIC  __RND_BLOCKSIZE
   196                             defc    __RND_BLOCKSIZE = CLIB_RND_BLOCKSIZE
   197                          
   198                             ; Define the height of the font
   199                             IF !DEFINED_CLIB_FONT_HEIGHT
   200                                defc CLIB_FONT_HEIGHT = 8
   201                             ENDIF
   202                             PUBLIC __CLIB_FONT_HEIGHT
   203                             defc __CLIB_FONT_HEIGHT = CLIB_FONT_HEIGHT
   204                          
   205                             ; Firmware click setting (MSX/SVI)
   206                             IF !DEFINED_CLIB_FIRMWARE_KEYBOARD_CLICK
   207                                defc CLIB_FIRMWARE_KEYBOARD_CLICK = -1
   208                             ENDIF
   209                             PUBLIC __CLIB_FIRMWARE_KEYBOARD_CLICK
   210                             defc __CLIB_FIRMWARE_KEYBOARD_CLICK = CLIB_FIRMWARE_KEYBOARD_CLICK
   211                          
   212                             ; Custom memory map
   213                             IF DEFINED_MMAP
   214                                 defc __MMAP = MMAP
   215                             ELSE
   216                                 defc __MMAP = 0
   217                             ENDIF
   218                          
/home/jorgegv/src/spectrum/z88dk/lib/config//../..//lib/target/zx/classic/spec_crt0.asm:
    95                          
    96                              org     CRT_ORG_CODE
    97                          
    98                          
    99                          start:
   100                          
   101                                  ; --- startup=2 ---> build a ROM
   102                          
   103                          IF (startup=2)
   104                          
   105                              IFNDEF CLIB_FGETC_CONS_DELAY
   106                                  defc CLIB_FGETC_CONS_DELAY = 100
   107                              ENDIF
   108                          
   109                              di          ; put hardware in a stable state
   110                              ld      a,$3F
   111                              ld      i,a
   112                              jr      init            ; go over rst 8, bypass shadow ROM
   113                          
   114                              defs    $0008-ASMPC
   115                          if (ASMPC<>$0008)
   116                              defs    CODE_ALIGNMENT_ERROR
   117                          endif
   118                          
   119                              ; --- rst 8 ---
   120                              ld      hl,($5c5d)      ; It was the address reached by CH-ADD.
   121                              nop                     ; one byte still, to jump over the
   122                                                      ; Opus Discovery and similar shadowing traps
   123                              ; --- nothing more ?
   124                          
   125                          init:
   126                          
   127                              INCLUDE	"crt/classic/crt_init_sp.asm"
   128                          
   129                              ld      a,@111000       ; White PAPER, black INK
   130                              call    zx_internal_cls
   131                              ld      (hl),0
   132                              ld      bc,42239
   133                              ldir
   134                          
   135                              INCLUDE	"crt/classic/crt_init_atexit.asm"
   136                              call    crt0_init_bss
   137                          
   138                              im      1
   139                              ei
   140                          ELSE
   141                          
   142                                  ; --- startup=[default] ---
   143                            IF DEFINED_CLIB_DEFAULT_SCREEN_MODE && __TS2068__
   144                              EXTERN ts_vmod
   145                              ld      l,CLIB_DEFAULT_SCREEN_MODE
   146                              call    ts_vmod
   147                            ENDIF
   148                            IF !DEFINED_CRT_DISABLELOADER
   149   000000 cd0000                  call   loadbanks
   150                            ENDIF
   151                          
   152   000003 fd210000                ld      iy,23610        ; restore the right iy value,
   153                                                          ; fixing the self-relocating trick, if any
   154                            IF !DEFINED_ZXVGS
   155   000007 ed730000                ld      (__restore_sp_onexit+1),sp   ; Save entry stack
   156                            ENDIF
   157                              INCLUDE	"crt/classic/crt_init_sp.asm"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_init_sp.asm:
     1                          IF __register_sp < -1
     2                          
     3                             IF __CPU_INTEL__
     4                               ld hl,(-__register_sp)      ; stack location is stored at memory address
     5                               ld sp,hl
     6                             ELSE
     7                               ld sp,(-__register_sp)      ; stack location is stored at memory address
     8                             ENDIF
     9                          
    10                          ELSE
    11                          
    12                             IF __register_sp != -1
    13                          
    14                                ld sp,__register_sp      ; stack is at fixed address
    15                          
    16                             ENDIF
    17                          
    18                          ENDIF
    19                          
    20                          
/home/jorgegv/src/spectrum/z88dk/lib/config//../..//lib/target/zx/classic/spec_crt0.asm:
   158                              INCLUDE	"crt/classic/crt_init_atexit.asm"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_init_atexit.asm:
     1                          
     2                              PUBLIC  __clib_exit_stack_size
     3                          
     4                          IF __clib_exit_stack_size > 0
     5   00000b 210000              ld      hl, -(__clib_exit_stack_size * 2)
     6   00000e 39                  add     hl,sp
     7   00000f f9                  ld      sp,hl
     8                          ENDIF
     9                          
    10                          
/home/jorgegv/src/spectrum/z88dk/lib/config//../..//lib/target/zx/classic/spec_crt0.asm:
   159   000010 cd0000              call    crt0_init_bss
   160   000013 ed730000            ld      (exitsp),sp
   161                          ; Optional definition for auto MALLOC init; it takes
   162                          ; all the space between the end of the program and UDG
   163                          IF DEFINED_USING_amalloc
   164                              defc    CRT_MAX_HEAP_ADDRESS = 65535 - 169
   165                              INCLUDE "crt/classic/crt_init_amalloc.asm"
   166                          ENDIF
   167                          
   168                            IF DEFINED_ZXVGS
   169                          ;setting variables needed for proper keyboard reading
   170                                  LD      (IY+1),$CD      ; FLAGS #5C3B
   171                                  LD      (IY+48),1       ; FLAGS2 #5C6A
   172                                  EI                      ; ZXVGS starts with disabled interrupts
   173                            ENDIF
   174                          ;        ld      a,2             ; open the upper display (uneeded?)
   175                          ;        call    5633
   176                          
   177                          ENDIF
   178                          
   179                          
   180                          IF DEFINED_NEEDresidos
   181                                  call    residos_detect
   182                                  jp      c,cleanup_exit
   183                          ENDIF
   184   000017 cd0000                  call    _main           ; Call user program
   185                          cleanup:
   186   00001a e5                      push    hl
   187   00001b cd0000                call    crt0_exit
   188                          
   189                          
   190                          
   191                          IF (startup=2)      ; ROM ?
   192                          
   193                          cleanup_exit:
   194                              rst     0
   195                          
   196                              defs    56-cleanup_exit-1
   197                          
   198                          if (ASMPC<>$0038)
   199                              defs    CODE_ALIGNMENT_ERROR
   200                          endif
   201                          
   202                          ; ######## IM 1 MODE INTERRUPT ENTRY ########
   203                          
   204                              INCLUDE "target/zx/classic/spec_crt0_rom_isr.asm"
   205                          
   206                          ; ########  END OF ROM INTERRUPT HANDLER ########
   207                          
   208                          PUBLIC zx_internal_cls
   209                          zx_internal_cls:
   210                              ld      hl,$4000        ; cls
   211                              ld      d,h
   212                              ld      e,l
   213                              inc     de
   214                              ld      (hl),0
   215                              ld      bc,$1800
   216                              ldir
   217                              ld      (hl),a
   218                              ld      bc,768
   219                              ldir
   220                              rrca
   221                              rrca
   222                              rrca
   223                              out     (254),a
   224                              ret
   225                          
   226                          
   227                          ELSE
   228                            IF DEFINED_ZXVGS
   229                                  POP     BC              ;let's say exit code goes to BC
   230                                  RST     8
   231                                  DEFB    $FD             ;Program finished
   232                            ELSE
   233                          cleanup_exit:
   234   00001e 210000                  ld      hl,10072        ;Restore hl' to what basic wants
   235   000021 d9                      exx
   236   000022 c1                      pop     bc
   237   000023 310000          __restore_sp_onexit:ld      sp,0            ;Restore stack to entry value
   238   000026 c9                      ret
   239                            ENDIF
   240                          ENDIF
   241                          
   242                          
   243                          
   244   000027 e9              l_dcal: jp      (hl)            ;Used for function pointer calls
   245                          
   246                          ; Runtime selection
   247                          
   248                          IF NEED_fzxterminal
   249                              PUBLIC  fputc_cons
   250                              PUBLIC  _fputc_cons
   251                              PUBLIC  _fgets_cons_erase_character
   252                              PUBLIC  fgets_cons_erase_character
   253                              EXTERN  fputc_cons_fzx
   254                              EXTERN  fgets_cons_erase_character_fzx
   255                              defc    DEFINED_fputc_cons = 1
   256                              defc    fputc_cons = fputc_cons_fzx
   257                              defc    _fputc_cons = fputc_cons_fzx
   258                              defc    fgets_cons_erase_character = fgets_cons_erase_character_fzx
   259                              defc    _fgets_cons_erase_character = fgets_cons_erase_character_fzx
   260                          ENDIF
   261                          
   262                              INCLUDE	"crt/classic/crt_runtime_selection.asm"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_runtime_selection.asm:
     1                          ;
     2                          ; Allow selection of the library functions at linktime
     3                          ;
     4                          ; Included by crt0 files
     5                          ;
     6                          
     7                          
     8                          ; scanf format picker
     9                          
    10                          ; Compatibility with the new library format picker. The classic library
    11                          ; implements several of these together so there's an element of grouping.
    12                          ;
    13                          ; Default is to enable all converters except for float.
    14                          ;
    15                          ; Use -pragma-define:CLIB_OPT_SCANF=0x..... to control formatters
    16                          ;
    17                          ; bit 0 =  $    01 = enable %d
    18                          ; bit 1 =  $    02 = enable %u
    19                          ; bit 2 =  $    04 = enable %x
    20                          ; bit 3 =  $    08 = enable %X (duplicate)
    21                          ; bit 4 =  $    10 = enable %o
    22                          ; bit 5 =  $    20 = enable %n
    23                          ; bit 6 =  $    40 = enable %i
    24                          ; bit 7 =  $    80 = enable %p
    25                          ; bit 8 =  $   100 = enable %B
    26                          ; bit 9 =  $   200 = enable %s
    27                          ; bit 10 = $   400 = enable %c
    28                          ; * bit 11 = $   800 = enable %I
    29                          ; bit 12 = $  1000 = enable %ld
    30                          ; bit 13 = $  2000 = enable %lu
    31                          ; bit 14 = $  4000 = enable %lx
    32                          ; bit 15 = $  8000 = enable %lX (duplicate)
    33                          ; bit 16 = $ 10000 = enable %lo
    34                          ; bit 17 = $ 20000 = enable %ln
    35                          ; bit 18 = $ 40000 = enable %li
    36                          ; bit 19 = $ 80000 = enable %lp
    37                          ; bit 20 = $100000 = enable %lB
    38                          ; * bit 21 = $200000 = enable %[
    39                          ; * bit 22 = $  400000 = enable %a
    40                          ; * bit 23 = $  800000 = enable %A
    41                          ; bit 24 = $ 1000000 = enable %e
    42                          ; bit 25 = $ 2000000 = enable %E
    43                          ; bit 26 = $ 4000000 = enable %f
    44                          ; bit 27 = $ 8000000 = enable %F
    45                          ; bit 28 = $10000000 = enable %g
    46                          ; bit 29 = $20000000 = enable %G
    47                          ; bit 30 = $40000000 = enable flags handling
    48                          
    49                          IF DEFINED_CLIB_OPT_SCANF
    50                          	; User has specified the configuration level - force scanf to be included
    51                          	UNDEFINE NEED_scanf
    52                          	DEFINE NEED_scanf
    53                          ELSE
    54                          	IF DEFINED_CRT_scanf_format
    55                          	    ;Only defined as part of sccz80
    56                          	    defc CLIB_OPT_SCANF = CRT_scanf_format
    57                                  ELSE
    58                          	    ; TODO: Some default configurations
    59                                  ENDIF
    60                          ENDIF
    61                          
    62                          
    63                          IF NEED_scanf
    64                          	PUBLIC	__scanf_format_table
    65                          	EXTERN	__scanf_handle_d
    66                          	EXTERN	__scanf_handle_u
    67                          	EXTERN	__scanf_handle_o
    68                          	EXTERN	__scanf_handle_x
    69                          	EXTERN	__scanf_handle_p
    70                          	EXTERN	__scanf_handle_B
    71                          	EXTERN	__scanf_handle_f
    72                          	EXTERN	__scanf_handle_s
    73                          	EXTERN	__scanf_handle_c
    74                          	EXTERN	__scanf_handle_n
    75                          	EXTERN	__scanf_handle_i
    76                          	EXTERN	__scanf_noop
    77                          
    78                          __scanf_format_table:
    79                          IF CLIB_OPT_SCANF & $40040
    80                          	defb	'i'
    81                          	defw	__scanf_handle_i
    82                          	defc	temp_CLIB_OPT_SCANF = CLIB_OPT_SCANF
    83                          	UNDEFINE CLIB_OPT_SCANF
    84                          	defc	CLIB_OPT_SCANF = temp_CLIB_OPT_SCANF | 0x3003 | 0x8c08c | 0x10010 | 0x100100
    85                          ENDIF
    86                          
    87                          
    88                          
    89                          IF CLIB_OPT_SCANF & $2002
    90                          	defb	'u'
    91                          	defw	__scanf_handle_u
    92                          ENDIF
    93                          
    94                          IF CLIB_OPT_SCANF & $1001
    95                          	defb	'd'
    96                          	defw	__scanf_handle_d
    97                          ENDIF
    98                          
    99                          IF CLIB_OPT_SCANF & $c00c
   100                          	defb	'x'
   101                          	defw	__scanf_handle_x
   102                          ENDIF
   103                          
   104                          IF CLIB_OPT_SCANF & $80080
   105                          	defb	'p'
   106                          	defw	__scanf_handle_x
   107                          ENDIF
   108                          
   109                          IF CLIB_OPT_SCANF & $10010
   110                          	defb	'o'
   111                          	defw	__scanf_handle_o
   112                          ENDIF
   113                          
   114                          IF CLIB_OPT_SCANF & $100100
   115                          	defb	'B'
   116                          	defw	__scanf_handle_B
   117                          ENDIF
   118                          
   119                          IF CLIB_OPT_SCANF & $20020
   120                          	defb	'n'
   121                          	defw	__scanf_handle_n
   122                          ENDIF
   123                          
   124                          IF CLIB_OPT_SCANF & $200
   125                          	defb	's'
   126                          	defw	__scanf_handle_s
   127                          ENDIF
   128                          
   129                          IF CLIB_OPT_SCANF & $400
   130                          	defb	'c'
   131                          	defw	__scanf_handle_c
   132                          ENDIF
   133                          
   134                          IF CLIB_OPT_SCANF & $4000000
   135                          	defb	'f'
   136                          	defw	__scanf_handle_f
   137                          ENDIF
   138                          
   139                          IF CLIB_OPT_SCANF & $1000000
   140                          	defb	'e'
   141                          	defw	__scanf_handle_f
   142                          ENDIF
   143                          IF CLIB_OPT_SCANF & $10000000
   144                          	defb	'g'
   145                          	defw	__scanf_handle_f
   146                          ENDIF
   147                          
   148                          	defb	0	;end marker
   149                          ENDIF
   150                          
   151                          ;
   152                          ; printf format picker
   153                          ;
   154                          
   155                          
   156                          IF DEFINED_CLIB_OPT_PRINTF
   157                          	; User has specified the configuration level - force printf to be included
   158                          	UNDEFINE NEED_printf
   159                          	DEFINE NEED_printf
   160                          ELSE
   161                          	IF DEFINED_CRT_printf_format
   162                          	    ;Only defined as part of sccz80
   163                          	    defc CLIB_OPT_PRINTF = CRT_printf_format
   164                                  ELSE
   165                          	    ; Default configurations to match old behaviour
   166                          	    ; The built in one is roughly the old ministdio
   167                          	    IF DEFINED_complexstdio
   168                                          defc CLIB_OPT_PRINTF = 0x851BF7BF
   169                                      ELSE
   170                          	        defc CLIB_OPT_PRINTF = 0x801BF7BF
   171                                      ENDIF
   172                                  ENDIF
   173                          ENDIF
   174                          
   175                          IF DEFINED_CLIB_OPT_PRINTF_2
   176                          	; User has specified the configuration level - force printf to be included
   177                          	UNDEFINE NEED_printf
   178                          	DEFINE NEED_printf
   179                          ENDIF
   180                          
   181                          IF NEED_printf
   182                          	PUBLIC	__printf_format_table
   183                          	PUBLIC  __printf_format_table64
   184                          	EXTERN	__printf_handle_d
   185                          	EXTERN	__printf_handle_u
   186                          	EXTERN	__printf_handle_o
   187                          	EXTERN	__printf_handle_x
   188                          	EXTERN	__printf_handle_X
   189                          	EXTERN	__printf_handle_p
   190                          	EXTERN	__printf_handle_e
   191                          	EXTERN	__printf_handle_f
   192                          	EXTERN	__printf_handle_s
   193                          	EXTERN	__printf_handle_c
   194                          	EXTERN	__printf_handle_n
   195                          	EXTERN	__printf_handle_B
   196                          	EXTERN	__printf_handle_ll
   197                          	EXTERN	__printf_handle_lld
   198                          	EXTERN	__printf_handle_llu
   199                          	EXTERN	__printf_handle_llo
   200                          	EXTERN	__printf_handle_llx
   201                          	EXTERN	__printf_handle_llX
   202                          	EXTERN	__printf_handle_llB
   203                          
   204                          __printf_format_table:
   205                          
   206                          IF CLIB_OPT_PRINTF & $2002
   207                          	defb	'u'
   208                          	defw	__printf_handle_u
   209                          ENDIF
   210                          
   211                          IF CLIB_OPT_PRINTF & $1001
   212                          	defb	'd'
   213                          	defw	__printf_handle_d
   214                          ENDIF
   215                          
   216                          IF CLIB_OPT_PRINTF & $4004
   217                          	defb	'x'
   218                          	defw	__printf_handle_x
   219                          ENDIF
   220                          
   221                          IF CLIB_OPT_PRINTF & $8008
   222                          	defb	'X'
   223                          	defw	__printf_handle_X
   224                          ENDIF
   225                          
   226                          IF CLIB_OPT_PRINTF & $80080
   227                          	defb	'p'
   228                          	defw	__printf_handle_x
   229                          ENDIF
   230                          
   231                          IF CLIB_OPT_PRINTF & $100100
   232                          	defb	'B'
   233                          	defw	__printf_handle_B
   234                          ENDIF
   235                          
   236                          IF CLIB_OPT_PRINTF  & $10010
   237                          	defb	'o'
   238                          	defw	__printf_handle_o
   239                          ENDIF
   240                          
   241                          IF CLIB_OPT_PRINTF & $20020
   242                          	defb	'n'
   243                          	defw	__printf_handle_n
   244                          ENDIF
   245                          
   246                          IF CLIB_OPT_PRINTF & $200
   247                          	defb	's'
   248                          	defw	__printf_handle_s
   249                          ENDIF
   250                          
   251                          IF CLIB_OPT_PRINTF & $400
   252                          	defb	'c'
   253                          	defw	__printf_handle_c
   254                          ENDIF
   255                          
   256                          IF CLIB_OPT_PRINTF & $4000000
   257                          	defb	'f'
   258                          	defw	__printf_handle_f
   259                          ENDIF
   260                          
   261                          IF CLIB_OPT_PRINTF  & $1000000
   262                          	defb	'e'
   263                          	defw	__printf_handle_e
   264                          ENDIF
   265                          IF CLIB_OPT_PRINTF & $10000000
   266                          	defb	'g'
   267                          	defw	__printf_handle_f
   268                          ENDIF
   269                          IF CLIB_OPT_PRINTF_2
   270                          	defb	'l'
   271                          	defw	__printf_handle_ll
   272                          ENDIF
   273                          	defb	0	;end marker
   274                          
   275                          __printf_format_table64:
   276                          
   277                          IF CLIB_OPT_PRINTF_2 & $02
   278                          	defb	'u'
   279                          	defw	__printf_handle_llu
   280                          ENDIF
   281                          
   282                          IF CLIB_OPT_PRINTF_2 & $01
   283                          	defb	'd'
   284                          	defw	__printf_handle_lld
   285                          ENDIF
   286                          
   287                          IF CLIB_OPT_PRINTF_2 & $04
   288                          	defb	'x'
   289                          	defw	__printf_handle_llx
   290                          ENDIF
   291                          
   292                          IF CLIB_OPT_PRINTF_2 & $08
   293                          	defb	'X'
   294                          	defw	__printf_handle_llX
   295                          ENDIF
   296                          IF CLIB_OPT_PRINTF_2  & $10
   297                          	defb	'o'
   298                          	defw	__printf_handle_llo
   299                          ENDIF
   300                          IF CLIB_OPT_PRINTF_2 & $100
   301                          	defb	'B'
   302                          	defw	__printf_handle_llB
   303                          ENDIF
   304                          	defb	0	;endmarker
   305                          
   306                          
   307                          
   308                          IF CLIB_OPT_PRINTF & $40000000
   309                          	EXTERN	__printf_get_flags_impl
   310                          	PUBLIC	__printf_get_flags
   311                          	defc	__printf_get_flags = __printf_get_flags_impl
   312                          ELSE
   313                          	EXTERN	__printf_get_flags_noop
   314                          	PUBLIC	__printf_get_flags
   315                          	defc	__printf_get_flags = __printf_get_flags_noop
   316                          ENDIF
   317                          
   318                          ENDIF
   319                          
   320                          
   321                          ;--------
   322                          ; Allow a compile time switch between native output and ANSI terminal
   323                          ;
   324                          ; -pragma-need=ansiterminal
   325                          ;--------
   326                          
   327                          IF NEED_ansiterminal
   328                          	PUBLIC		fputc_cons
   329                          	EXTERN		fputc_cons_ansi
   330                          	EXTERN		puts_cons_ansi
   331                          	defc DEFINED_fputc_cons = 1
   332                          	defc DEFINED_puts_cons = 1
   333                          	defc fputc_cons = fputc_cons_ansi
   334                          
   335                          	; Bridge VT100 to gencon
   336                                  IF DEFINED_CLIB_ANSITERMINAL_BRIDGE & CLIB_ANSITERMINAL_BRIDGE != 0
   337                                      PUBLIC ansi_attr
   338                                      PUBLIC ansi_BEL
   339                                      PUBLIC ansi_cls
   340                                      PUBLIC ansi_CHAR
   341                                      PUBLIC ansi_del_line
   342                                      PUBLIC ansi_SCROLLUP
   343                                      EXTERN __gencon_ansi_attr
   344                                      EXTERN __gencon_ansi_BEL
   345                                      EXTERN __gencon_ansi_cls
   346                                      EXTERN __gencon_ansi_CHAR
   347                                      EXTERN __gencon_ansi_del_line
   348                                      EXTERN __gencon_ansi_SCROLLUP
   349                                      defc ansi_attr = __gencon_ansi_attr
   350                                      defc ansi_BEL = __gencon_ansi_BEL
   351                                      defc ansi_cls = __gencon_ansi_cls
   352                                      defc ansi_CHAR = __gencon_ansi_CHAR
   353                                      defc ansi_del_line = __gencon_ansi_del_line
   354                                      defc ansi_SCROLLUP = __gencon_ansi_SCROLLUP
   355                          
   356                                      ; We're using gencon, don't include an ANSIfont
   357                                      UNDEFINE TAR__no_ansifont
   358                                      defc TAR__no_ansifont = 1
   359                          	    IF !DEFINED_ansicolumns
   360                                          defc ansicolumns = CONSOLE_COLUMNS
   361                                          defc DEFINED_ansicolumns = 1
   362                                      ENDIF
   363                                  ENDIF
   364                          
   365                                 	PUBLIC ansicolumns
   366                          
   367                          	IF !TAR__no_ansifont
   368                                  	PUBLIC ansicharacter_pixelwidth
   369                          		PUBLIC ansifont
   370                                  	PUBLIC ansifont_is_packed
   371                                  ELSE
   372                                          defc DEFINED_ansifont = 1
   373                          	ENDIF
   374                          
   375                          	IF !ansipixels
   376                          		defc ansipixels = 256
   377                          	ENDIF
   378                          
   379                          	IF !DEFINED_ansicolumns
   380                          		 defc ansicolumns = 64
   381                          	ENDIF
   382                          
   383                          	UNDEFINE CONSOLE_COLUMNS
   384                          	defc CONSOLE_COLUMNS = ansicolumns
   385                          
   386                          	IF DEFINED_ansirows
   387                          		UNDEFINE CONSOLE_ROWS
   388                          		defc CONSOLE_ROWS = ansirows
   389                          	ENDIF
   390                          
   391                          
   392                          	IF (ansicolumns = (ansipixels/2))
   393                          	    defc ansicharacter_pixelwidth = 2
   394                                      IF !DEFINED_ansifont
   395                                      	EXTERN ansifont_f4pack
   396                          	    	defc ansifont = ansifont_f4pack
   397                                      	defc ansifont_is_packed = 1
   398                                      ENDIF
   399                          	ENDIF
   400                          	IF (ansicolumns = (ansipixels/3))
   401                          	    defc ansicharacter_pixelwidth = 3
   402                                      IF !DEFINED_ansifont
   403                                          EXTERN ansifont_f4pack
   404                          	        defc ansifont = ansifont_f4pack
   405                                          defc ansifont_is_packed = 1
   406                          	    ENDIF
   407                          	ENDIF
   408                          	IF (ansicolumns = (ansipixels/4))
   409                          	    defc ansicharacter_pixelwidth = 4
   410                                      IF !DEFINED_ansifont
   411                                          EXTERN ansifont_f4pack
   412                          	        defc ansifont = ansifont_f4pack
   413                                          defc ansifont_is_packed = 1
   414                          	    ENDIF
   415                          	ENDIF
   416                          	IF (ansicolumns = (ansipixels/5))
   417                          	    defc ansicharacter_pixelwidth = 5
   418                                      IF !DEFINED_ansifont
   419                                          EXTERN ansifont_f5
   420                          	        defc ansifont = ansifont_f5
   421                                          defc ansifont_is_packed = 0
   422                          	    ENDIF
   423                          	ENDIF
   424                          	IF (ansicolumns = (ansipixels/6))
   425                          	    defc ansicharacter_pixelwidth = 6
   426                                      IF !DEFINED_ansifont
   427                                          EXTERN ansifont_f6
   428                          	        defc ansifont = ansifont_f6
   429                                          defc ansifont_is_packed = 0
   430                          	    ENDIF
   431                          	ENDIF
   432                          	IF (ansicolumns = (ansipixels/7))
   433                          	    defc ansicharacter_pixelwidth = 7
   434                                      IF !DEFINED_ansifont
   435                                          EXTERN ansifont_f8
   436                          	        defc ansifont = ansifont_f8
   437                                          defc ansifont_is_packed = 0
   438                          	    ENDIF
   439                          	ENDIF
   440                          	IF (ansicolumns = (ansipixels/8))
   441                          	    defc ansicharacter_pixelwidth = 8
   442                                      IF !DEFINED_ansifont
   443                                          EXTERN ansifont_f8
   444                          	        defc ansifont = ansifont_f8
   445                                          defc ansifont_is_packed = 0
   446                          	    ENDIF
   447                          	ENDIF
   448                          	IF (ansicolumns = (ansipixels/9))
   449                          	    defc ansicharacter_pixelwidth = 9
   450                                      IF !DEFINED_ansifont
   451                                          EXTERN ansifont_f8
   452                          	        defc ansifont = ansifont_f8
   453                                          defc ansifont_is_packed = 0
   454                          	    ENDIF
   455                          	ENDIF
   456                          
   457                          	IF (ansipixels = 512)
   458                          		IF (ansicolumns = 48)
   459                          			defc ansicharacter_pixelwidth = 9
   460                          			IF !DEFINED_ansifont
   461                          				EXTERN ansifont_f8
   462                          				defc ansifont = ansifont_f8
   463                          				defc ansifont_is_packed = 0
   464                          			ENDIF
   465                          		ENDIF
   466                          		IF (ansicolumns = 80)
   467                          			defc ansicharacter_pixelwidth = 6
   468                          			IF !DEFINED_ansifont
   469                          				EXTERN ansifont_f6
   470                          				defc ansifont = ansifont_f6
   471                          				defc ansifont_is_packed = 0
   472                          			ENDIF
   473                          		ENDIF
   474                          		IF (ansicolumns = 160)
   475                          			defc ansicharacter_pixelwidth = 3
   476                          			IF !DEFINED_ansifont
   477                          				EXTERN ansifont_f4pack
   478                          				defc ansifont = ansifont_f4pack
   479                          				defc ansifont_is_packed = 1
   480                          			ENDIF
   481                          		ENDIF
   482                          	ENDIF
   483                          
   484                          	IF (ansipixels = 256)
   485                          		IF (ansicolumns = 24)
   486                          			defc ansicharacter_pixelwidth = 9
   487                          			IF !DEFINED_ansifont
   488                          				EXTERN ansifont_f8
   489                          				defc ansifont = ansifont_f8
   490                          				defc ansifont_is_packed = 0
   491                          			ENDIF
   492                          		ENDIF
   493                          		IF (ansicolumns = 40)
   494                          			defc ansicharacter_pixelwidth = 6
   495                          			IF !DEFINED_ansifont
   496                          				EXTERN ansifont_f6
   497                          				defc ansifont = ansifont_f6
   498                          				defc ansifont_is_packed = 0
   499                          			ENDIF
   500                          		ENDIF
   501                          		IF (ansicolumns = 80)
   502                          			defc ansicharacter_pixelwidth = 3
   503                          			IF !DEFINED_ansifont
   504                          				EXTERN ansifont_f4pack
   505                          				defc ansifont = ansifont_f4pack
   506                          				defc ansifont_is_packed = 1
   507                          			ENDIF
   508                          		ENDIF
   509                          	ENDIF
   510                          
   511                          ENDIF
   512                          
   513                          ; If it's not been overridden by anybody, lets use the native output
   514                          IF !DEFINED_fputc_cons
   515                          	PUBLIC		fputc_cons
   516                          	defc DEFINED_fputc_cons = 1
   517                                  IF !TAR__fputc_cons_generic
   518                          	     EXTERN	fputc_cons_native
   519                            	     defc fputc_cons = fputc_cons_native
   520                                  ELSE
   521                          	     EXTERN	fputc_cons_generic
   522                            	     defc fputc_cons = fputc_cons_generic
   523                                  ENDIF
   524                          ENDIF
   525                          
   526                          IF DEFINED_fputc_cons
   527                          	PUBLIC		_fputc_cons
   528                          	defc		_fputc_cons = fputc_cons
   529                          
   530                          ENDIF
   531                          
   532                          IF !DEFINED_getk
   533                             IF !DEFINED_fgetc_cons
   534                                IF TAR__fgetc_cons_inkey
   535                                    EXTERN fgetc_cons_inkey
   536                                    EXTERN getk_inkey
   537                                    PUBLIC fgetc_cons
   538                                    PUBLIC _fgetc_cons
   539                                    PUBLIC getk
   540                                    PUBLIC _getk
   541                                    defc fgetc_cons = fgetc_cons_inkey
   542                                    defc _fgetc_cons = fgetc_cons_inkey
   543                                    defc getk = getk_inkey
   544                                    defc _getk = getk_inkey
   545                                ENDIF
   546                             ENDIF
   547                          ENDIF
   548                          
   549                          IF DEFINED_fgetc_cons
   550                            IF !DEFINED__fgetc_cons
   551                                PUBLIC _fgetc_cons
   552                                defc _fgetc_cons = fgetc_cons
   553                            ENDIF
   554                          ENDIF
   555                          
   556                          IF DEFINED_getk
   557                            IF !DEFINED__getk
   558                                PUBLIC _getk
   559                                defc _getk = getk
   560                            ENDIF
   561                          ENDIF
   562                          
   563                          
   564                          ;TODO: These need to go into rules
   565                          IF CONSOLE_COLUMNS
   566                          	PUBLIC CONSOLE_COLUMNS
   567                          ENDIF
   568                          IF CONSOLE_ROWS
   569                          	PUBLIC CONSOLE_ROWS
   570                          ENDIF
   571                          
   572                          IF !CONSOLE_XOFFSET
   573                              defc CONSOLE_XOFFSET = 0
   574                          ENDIF
   575                          PUBLIC CONSOLE_XOFFSET
   576                          IF !CONSOLE_YOFFSET
   577                              defc CONSOLE_YOFFSET = 0
   578                          ENDIF
   579                          PUBLIC CONSOLE_YOFFSET
   580                          
   581                          IF !CLIB_KBHIT_NOSTORE
   582                              defc CLIB_KBHIT_NOSTORE = 0
   583                          ENDIF
   584                          PUBLIC CLIB_KBHIT_NOSTORE
   585                          
   586                          
   587                          
/home/jorgegv/src/spectrum/z88dk/lib/config//../..//lib/target/zx/classic/spec_crt0.asm:
   263                          
   264                          ;---------------------------------------------
   265                          ; Some +3 stuff - this needs to be below 49152
   266                          ;---------------------------------------------
   267                          IF DEFINED_NEEDresidos
   268                              INCLUDE "target/zx/def/idedos.def"
   269                          
   270                              defc    ERR_NR=$5c3a            ; BASIC system variables
   271                              defc    ERR_SP=$5c3d
   272                          
   273                              PUBLIC    dodos
   274                              EXTERN  dodos_residos
   275                              defc    dodos = dodos_residos
   276                          
   277                          ; Detect an installed version of ResiDOS.
   278                          ;
   279                          ; This should be done before you attempt to call any other ResiDOS/+3DOS/IDEDOS
   280                          ; routines, and ensures that the Spectrum is running with ResiDOS installed.
   281                          ; Since +3DOS and IDEDOS are present only from v1.40, this version must
   282                          ; be checked for before making any further calls.
   283                          ;
   284                          ; If you need to use calls that were only provided from a certain version of
   285                          ; ResiDOS, you can check that here as well.
   286                          ;
   287                          ; The ResiDOS version call is made with a special hook-code after a RST 8,
   288                          ; which will cause an error on Speccies without ResiDOS v1.20+ installed,
   289                          ; or error 0 (OK) if ResiDOS v1.20+ is present. Therefore, we need
   290                          ; to trap any errors here.
   291                          residos_detect:
   292                              ld      hl,(ERR_SP)
   293                              push    hl                      ; save the existing ERR_SP
   294                              ld      hl,detect_error
   295                              push    hl                      ; stack error-handler return address
   296                              ld      hl,0
   297                              add     hl,sp
   298                              ld      (ERR_SP),hl             ; set the error-handler SP
   299                              rst     RST_HOOK                ; invoke the version info hook code
   300                              defb    HOOK_VERSION
   301                              pop     hl                      ; ResiDOS doesn't return, so if we get
   302                              jr      noresidos               ; here, some other hardware is present
   303                          detect_error:
   304                              pop     hl
   305                              ld      (ERR_SP),hl             ; restore the old ERR_SP
   306                              ld      a,(ERR_NR)
   307                              inc     a                       ; is the error code now "OK"?
   308                              jr      nz,noresidos            ; if not, ResiDOS was not detected
   309                              ex      de,hl                   ; get HL=ResiDOS version
   310                              push    hl                      ; save the version
   311                              ld      de,$0140                ; DE=minimum version to run with
   312                              and     a
   313                              sbc     hl,de
   314                              pop     bc                      ; restore the version to BC
   315                              ret     nc                      ; and return with it if at least v1.40
   316                          noresidos:
   317                              ld      bc,0                    ; no ResiDOS
   318                              ld      a,$ff
   319                              ld      (ERR_NR),a              ; clear error
   320                              ret
   321                          
   322                          
   323                          ENDIF
   324                          
   325                          
   326                          
   327                          ; Call a routine in the spectrum ROM
   328                          ; The routine to call is stored in the two bytes following
   329                          call_rom3:
   330   000028 d9                  exx                      ; Use alternate registers
   331                          IF DEFINED_NEED_ZXMMC
   332                              push    af
   333                              xor     a                ; standard ROM
   334                              out     ($7F),a          ; ZXMMC FASTPAGE
   335                              pop     af
   336                          ENDIF
   337   000029 e3                  ex      (sp),hl          ; get return address
   338   00002a 4e                  ld      c,(hl)
   339   00002b 23                  inc     hl
   340   00002c 46                  ld      b,(hl)           ; BC=BASIC address
   341   00002d 23                  inc     hl
   342   00002e e3                  ex      (sp),hl          ; restore return address
   343   00002f c5                  push    bc
   344   000030 d9                  exx                      ; Back to the regular set
   345   000031 c9                  ret
   346                          
   347                          
   348                          
   349                          
   350                          IF (startup=2) 			;ROM
   351                          
   352                          	IF !DEFINED_CRT_ORG_BSS
   353                          	    defc CRT_ORG_BSS = 24576
   354                          	    defc DEFINED_CRT_ORG_BSS = 1
   355                          	ENDIF
   356                          
   357                                  ; If we were given a model then use it
   358                                  IF DEFINED_CRT_MODEL
   359                                      defc __crt_model = CRT_MODEL
   360                                  ELSE
   361                                      defc __crt_model = 1
   362                                  ENDIF
   363                          ELSE
   364                            IF !DEFINED_CRT_DISABLELOADER
   365                          loadbanks:
   366                              IF DEFINED_CRT_PLUS3LOADER
   367                                  INCLUDE "target/zx/classic/zx_p3loader.asm"
   368                              ELSE
   369                                  INCLUDE "target/zx/classic/zx_tapeloader.asm"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/target/zx/classic/zx_tapeloader.asm:
     1                          
     2                              EXTERN  __DATA_END_tail
     3                              EXTERN  __BANK_0_END_tail
     4                              EXTERN  __BANK_1_END_tail
     5                              EXTERN  __BANK_2_END_tail
     6                              EXTERN  __BANK_3_END_tail
     7                              EXTERN  __BANK_4_END_tail
     8                              EXTERN  __BANK_5_END_tail
     9                              EXTERN  __BANK_6_END_tail
    10                              EXTERN  __BANK_7_END_tail
    11                          
    12                          
    13                               ; Tape loader
    14                          ;     ld   ix,CRT_ORG_CODE
    15                          ;     ld   de,__DATA_END_tail - CRT_ORG_CODE
    16                          ;     xor  a   ;Bank 0
    17                          ;     call load_block
    18                          ;     ret  c
    19   000032 dd210000             ld   ix,CRT_ORG_BANK_0
    20   000036 110000               ld   de,__BANK_0_END_tail - CRT_ORG_BANK_0
    21   000039 0e00                 ld   c,16 ;Bank 0
    22   00003b cd0000               call load_block
    23   00003e d8                   ret  c
    24   00003f dd210000             ld   ix,CRT_ORG_BANK_1
    25   000043 110000               ld   de,__BANK_1_END_tail - CRT_ORG_BANK_1
    26   000046 0e00                 ld   c,17 ;Bank 1
    27   000048 cd0000               call load_block
    28   00004b d8                   ret  c
    29   00004c dd210000             ld   ix,CRT_ORG_BANK_2
    30   000050 110000               ld   de,__BANK_2_END_tail - CRT_ORG_BANK_2
    31   000053 0e00                 ld   c,18 ;Bank 2
    32   000055 cd0000               call load_block
    33   000058 d8                   ret  c
    34   000059 dd210000             ld   ix,CRT_ORG_BANK_3
    35   00005d 110000               ld   de,__BANK_3_END_tail - CRT_ORG_BANK_3
    36   000060 0e00                 ld   c,19 ;Bank 3
    37   000062 cd0000               call load_block
    38   000065 d8                   ret  c
    39   000066 dd2100c0             ld   ix,CRT_ORG_BANK_4
    40   00006a 110040               ld   de,__BANK_4_END_tail - CRT_ORG_BANK_4
    41   00006d 0e14                 ld   c,20 ;Bank 4
    42   00006f cda600               call load_block
    43   000072 d8                   ret  c
    44   000073 dd2100c0             ld   ix,CRT_ORG_BANK_5
    45   000077 110040               ld   de,__BANK_5_END_tail - CRT_ORG_BANK_5
    46   00007a 0e15                 ld   c,21 ;Bank 5
    47   00007c cda600               call load_block
    48   00007f d8                   ret  c
    49   000080 dd2100c0             ld   ix,CRT_ORG_BANK_6
    50   000084 110040               ld   de,__BANK_6_END_tail - CRT_ORG_BANK_6
    51   000087 0e16                 ld   c,22 ;Bank 6
    52   000089 cda600               call load_block
    53   00008c d8                   ret  c
    54   00008d dd2100c0             ld   ix,CRT_ORG_BANK_7
    55   000091 110040               ld   de,__BANK_7_END_tail - CRT_ORG_BANK_7
    56   000094 0e17                 ld   c,23 ;Bank 7
    57   000096 cda600               call load_block
    58   000099 f3                   di
    59   00009a 3e10                 ld   a,16
    60   00009c 325c5b               ld   (23388),a
    61   00009f 01fd7f               ld   bc,32765
    62   0000a2 ed79                 out  (c),a
    63   0000a4 fb                   ei
    64   0000a5 c9                   ret
    65                          
    66                          
    67                          load_block:
    68   0000a6 7a                   ld   a,d
    69   0000a7 b3                   or   e
    70   0000a8 c8                   ret  z     ;Nothing to load
    71   0000a9 79                   ld   a,c
    72   0000aa f3                   di
    73   0000ab 325c5b               ld   (23388),a
    74   0000ae 01fd7f               ld   bc,32765
    75   0000b1 ed79                 out  (c),a
    76   0000b3 fb                   ei
    77   0000b4 2a3d5c               ld   hl,(23613)
    78   0000b7 e5                   push hl
    79   0000b8 21c600               ld   hl,load_block1
    80   0000bb e5                   push hl
    81   0000bc ed733d5c             ld   (23613),sp
    82   0000c0 3eff                 ld   a,255  ;Data block
    83   0000c2 37                   scf         ;Load
    84   0000c3 cd5605               call 1366
    85                          load_block1:
    86   0000c6 e1                   pop  hl
    87   0000c7 e1                   pop  hl
    88   0000c8 223d5c               ld   (23613),hl
    89   0000cb a7                   and  a
    90   0000cc c9                   ret
    91                          
/home/jorgegv/src/spectrum/z88dk/lib/config//../..//lib/target/zx/classic/spec_crt0.asm:
   370                              ENDIF
   371                            ENDIF
   372                          ENDIF
   373                          
   374                          ; If we were given an address for the BSS then use it
   375                          IF DEFINED_CRT_ORG_BSS
   376                              defc    __crt_org_bss = CRT_ORG_BSS
   377                          ENDIF
   378                          
   379                          ; Create a dedicated contended section
   380                          IF CRT_ORG_CODE < 32768
   381                              SECTION CONTENDED
   382                          ENDIF
   383                          
   384                              INCLUDE	"crt/classic/crt_section.asm"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section.asm:
     1                          ; Memory map and section setup
     2                          ;
     3                          ; Contains the generic variables + features
     4                          
     5                          ;
     6                          ; crt_model = 0    ; everything in RAM
     7                          ; crt_model = 1    ; ROM model, data section copied
     8                          ; crt_model = 2    ; ROM model, data section compressed with zx7
     9                          ; crt_model = 3    ; ROM model, data section compressed with zx0
    10                          
    11                          ; Include the default memory map. You can override this
    12                          
    13                          IF __MMAP == -1
    14                              ; The user has supplied a memory map.
    15                              INCLUDE  "./mmap.inc"
    16                          ELSE
    17                              ; Include the standard memory map
    18                              INCLUDE  "crt/classic/crt_section_standard.asm"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section_standard.asm:
     1                          ; Classic Memory map and section setup
     2                          ;
     3                          ; This layout suits all the classic machines. Memory placement is
     4                          ; affected by:
     5                          ;
     6                          ; CRT_MODEL: RAM/ROM configuration
     7                          ; CRT_ORG_CODE: Where code starts executing from
     8                          ; CRT_ORG_BSS:  Where uninitialised global variables are placed
     9                          ; CRT_ORG_GRAPHICS: Where graphics routines + variables are stored (certain ports only)
    10                          
    11                          ;
    12                          ; Contains the generic variables + features
    13                          
    14                          ;
    15                          ; crt_model = 0		; everything in RAM
    16                          ; crt_model = 1		; ROM model, data section copied
    17                          ; crt_model = 2		; ROM model, data section compressed (zx7)
    18                          ; crt_model = 3		; ROM model, data section compressed (zx0)
    19                          
    20                          
    21                          
    22                              INCLUDE "crt/classic/crt_section_code.inc"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section_code.inc:
     1                          ; CODE sections defined by the classic library
     2                          
     3                              SECTION CODE
     4                              SECTION code_crt_init
     5                              SECTION code_crt_init_exit
     6                              SECTION code_crt_exit
     7                              SECTION code_crt_exit_exit
     8                              SECTION code_driver
     9                              SECTION rodata_driver       ;Keep it in low memoey
    10                              SECTION code_compiler
    11                              SECTION code_clib
    12                              SECTION code_l
    13                              SECTION code_l_sdcc
    14                              SECTION code_l_sccz80
    15                              SECTION code_compress_zx7
    16                              SECTION code_compress_zx0
    17                              SECTION code_compress_zx1
    18                              SECTION code_compress_zx2
    19                              SECTION code_compress_aplib
    20                              SECTION code_ctype
    21                              SECTION code_esxdos
    22                              SECTION code_fp
    23                              SECTION code_fp_math48
    24                              SECTION code_fp_math32
    25                              SECTION code_fp_math16
    26                              SECTION code_fp_mbf32
    27                              SECTION code_fp_mbf64
    28                              SECTION code_fp_am9511
    29                              SECTION code_fp_dai32
    30                              SECTION code_math
    31                              SECTION code_error
    32                              SECTION code_stdlib
    33                              SECTION code_string
    34                              SECTION code_adt_b_array
    35                              SECTION code_adt_b_vector
    36                              SECTION code_adt_ba_priority_queue
    37                              SECTION code_adt_ba_stack
    38                              SECTION code_adt_bv_priority_queue
    39                              SECTION code_adt_bv_stack
    40                              SECTION code_adt_p_forward_list
    41                              SECTION code_adt_p_forward_list_alt
    42                              SECTION code_adt_p_list
    43                              SECTION code_adt_p_queue
    44                              SECTION code_adt_p_stack
    45                              SECTION code_adt_w_array
    46                              SECTION code_adt_w_vector
    47                              SECTION code_adt_wa_priority_queue
    48                              SECTION code_adt_wa_stack
    49                              SECTION code_adt_wv_priority_queue
    50                              SECTION code_adt_wv_stack
    51                              SECTION code_alloc_balloc
    52                              SECTION code_alloc_obstack
    53                              SECTION code_arch
    54                              SECTION code_font
    55                              SECTION code_font_fzx
    56                              SECTION code_psg
    57                              SECTION code_sound_ay
    58                              SECTION code_PSGlib
    59                              SECTION code_time
    60                              SECTION code_z80
    61                              SECTION code_sprite_sp1
    62                              SECTION code_temp_sp1
    63                              SECTION code_splib2
    64                              SECTION code_sound_bit
    65                          IF !__crt_org_graphics
    66                              SECTION code_graphics
    67                          ENDIF
    68                              SECTION code_user
    69                              SECTION CODE_END
    70                          
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section_standard.asm:
    23                              INCLUDE "crt/classic/crt_section_rodata.inc"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section_rodata.inc:
     1                          ; RODATA sections defined by the classic library
     2                          
     3                              SECTION RODATA
     4                              SECTION rodata_fp
     5                              SECTION rodata_fp_math48
     6                              SECTION rodata_fp_math32
     7                              SECTION rodata_fp_math16
     8                              SECTION rodata_fp_mbf32
     9                              SECTION rodata_fp_mbf64
    10                              SECTION rodata_fp_am9511
    11                              SECTION rodata_fp_dai32
    12                              SECTION rodata_arch
    13                              SECTION rodata_compiler
    14                              SECTION rodata_clib
    15                              SECTION rodata_psg
    16                              SECTION rodata_sound_ay
    17                          IF !__crt_org_graphics
    18                              SECTION rodata_graphics
    19                          ENDIF
    20                              SECTION rodata_user
    21                              SECTION rodata_font
    22                              SECTION rodata_font_fzx
    23                              SECTION rodata_font_4x8
    24                              SECTION rodata_font_6x8
    25                              SECTION rodata_font_8x8
    26                              SECTION rodata_font_8x10
    27                              SECTION rodata_font_ansi
    28                              SECTION rodata_splib2
    29                              SECTION rodata_sound_bit
    30                              ; Keep the following section last of all
    31                              SECTION rodata_appdor
    32                              SECTION RODATA_END
    33                          
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section_standard.asm:
    24                              SECTION ROMABLE_END
    25                          IF !__crt_model
    26                              INCLUDE "crt/classic/crt_section_data.inc"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section_data.inc:
     1                          
     2                          
     3                              SECTION DATA
     4                            IF !__crt_org_graphics
     5                              SECTION smc_clib
     6                            ENDIF
     7                              SECTION smc_fp
     8                              SECTION smc_compress
     9                              SECTION smc_user
    10                              SECTION data_driver
    11                              SECTION data_clib
    12                              SECTION data_stdlib
    13                              SECTION data_psg
    14                              SECTION data_sound_ay
    15                              SECTION	data_PSGlib
    16                            IF !__crt_org_graphics
    17                              SECTION data_graphics
    18                            ENDIF
    19                              SECTION data_crt
    20                              SECTION data_fp_mbf32
    21                              SECTION data_arch
    22                              SECTION data_compiler
    23                              SECTION data_splib2
    24                              SECTION data_user
    25                              SECTION data_alloc_balloc
    26                              SECTION DATA_END
    27                          
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section_standard.asm:
    27                          ENDIF
    28                              INCLUDE "crt/classic/crt_section_bss.inc"
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section_bss.inc:
     1                              SECTION BSS
     2                          IF __crt_org_bss
     3                              org     __crt_org_bss
     4                              defb    0   ; control name of bss binary
     5                          ENDIF
     6                              SECTION bss_fp
     7                              SECTION bss_fp_math32
     8                              SECTION bss_fp_math16
     9                              SECTION bss_fp_mbf32
    10                              SECTION bss_fp_mbf64
    11                              SECTION bss_fp_am9511
    12                              SECTION bss_fp_dai32
    13                              SECTION bss_compress_aplib
    14                              SECTION bss_error
    15                              SECTION bss_crt
    16                              SECTION bss_fardata
    17                          IF __crt_org_bss_fardata_start
    18                              org	__crt_org_bss_fardata_start
    19                          ENDIF
    20                              SECTION bss_compiler
    21                          IF __crt_org_bss_compiler_start
    22                              org	__crt_org_bss_compiler_start
    23                          ENDIF
    24                              SECTION bss_driver
    25                              SECTION bss_arch
    26                              SECTION bss_clib
    27                              SECTION bss_string
    28                              SECTION bss_alloc_balloc
    29                          IF !__crt_org_graphics
    30                              SECTION bss_graphics
    31                          ENDIF
    32                              SECTION bss_psg
    33                              SECTION bss_sound_ay
    34                              SECTION	bss_PSGlib
    35                              SECTION bss_splib2
    36                              SECTION bss_user
    37                          
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section_standard.asm:
    29                          
    30                          IF __crt_model > 0
    31                              SECTION DATA
    32                              org     -1
    33                              defb    0		; control name of data binary
    34                              INCLUDE "crt/classic/crt_section_data.inc"
    35                          ENDIF
    36                              SECTION BSS_END
    37                          
    38                          IF __crt_org_graphics
    39                              SECTION	HIMEM
    40                              org	__crt_org_graphics
    41                              SECTION smc_clib
    42                              SECTION code_graphics
    43                              SECTION code_himem
    44                              SECTION rodata_graphics
    45                              SECTION rodata_himem
    46                              SECTION data_himem
    47                              SECTION data_graphics
    48                              SECTION bss_graphics
    49                              SECTION bss_himem
    50                              SECTION HIMEM_END
    51                          ENDIF
    52                          
/home/jorgegv/src/spectrum/z88dk/lib/config/../../lib/crt/classic/crt_section.asm:
    19                          ENDIF
    20                          
    21                          
    22                          ; The classic CRTs need some things setup, so do it
    23                          
    24                              SECTION code_crt_init
    25                          crt0_init_bss:
    26                              EXTERN  __BSS_head
    27                              EXTERN  __BSS_END_tail
    28                          IF CRT_INITIALIZE_BSS = 1
    29   000000 af                  xor     a
    30   000001 210000              ld      hl,__BSS_head
    31   000004 010000              ld      bc,__BSS_END_tail - __BSS_head - 1
    32                            IF !__CPU_INTEL__ && !__CPU_GBZ80__
    33   000007 110000              ld      de,__BSS_head + 1
    34   00000a 77                  ld      (hl),a
    35   00000b edb0                ldir
    36                            ELSE
    37                              inc     b
    38                              inc     c
    39                          init_8080:
    40                              ld      (hl+),a
    41                              dec     c
    42                              jr      NZ,init_8080
    43                              dec     b
    44                              jr      NZ,init_8080
    45                            ENDIF
    46                          ELSE
    47                              xor     a
    48                          ENDIF
    49                          
    50                              ; a = 0 - reset exitcount
    51   00000d 320000              ld      (exitcount),a
    52                          IF CRT_ENABLE_STDIO = 1 && CLIB_FOPEN_MAX > 0
    53                              ; Setup std* streams
    54   000010 210000              ld      hl,__sgoioblk+2
    55   000013 3600                ld      (hl),19 ;stdin
    56   000015 210000              ld      hl,__sgoioblk+12
    57   000018 3600                ld      (hl),21 ;stdout
    58   00001a 210000              ld      hl,__sgoioblk+22
    59   00001d 3600                ld      (hl),21 ;stderr
    60                          ENDIF
    61                          IF DEFINED_USING_amalloc
    62                            IF __CPU_GBZ80__
    63                              ld      hl,__BSS_END_tail
    64                              ld      a,l
    65                              ld      (_heap),a
    66                              ld      a,h
    67                              ld      (_heap+1),a
    68                            ELSE
    69                              ld      hl,__BSS_END_tail
    70                              ld      (_heap),hl
    71                            ENDIF
    72                          ENDIF
    73                          IF ( __crt_model = 1 )
    74                              ; Just copy the DATA section
    75                              EXTERN  __ROMABLE_END_tail
    76                              EXTERN  __DATA_head
    77                              EXTERN  __DATA_END_tail
    78                              ld      hl,__ROMABLE_END_tail
    79                              ld      de,__DATA_head
    80                              ld      bc,__DATA_END_tail - __DATA_head
    81                              EXTERN  asm_memcpy
    82                              call    asm_memcpy
    83                          ELIF ( __crt_model >= 2 )
    84                              EXTERN  __ROMABLE_END_tail
    85                              EXTERN  __DATA_head
    86                              ld      hl,__ROMABLE_END_tail
    87                              ld      de,__DATA_head
    88                            IF ( __crt_model = 2)
    89                              EXTERN  asm_dzx7_standard
    90                              call    asm_dzx7_standard
    91                            ELIF ( __crt_model = 3)
    92                              EXTERN  asm_dzx0_standard
    93                              call    asm_dzx0_standard
    94                            ENDIF
    95                          ENDIF
    96                          
    97                              SECTION code_crt_init_exit
    98   000000 c9                  ret
    99                              SECTION code_crt_exit
   100                          crt0_exit:
   101                              ; Teardown code can go here
   102                              SECTION code_crt_exit_exit
   103   000000 c9                  ret
   104                          
   105                          
   106                              SECTION bss_crt
   107                          IF CRT_ENABLE_STDIO = 1 && CLIB_FOPEN_MAX > 0
   108                              PUBLIC  __sgoioblk
   109                              PUBLIC  __sgoioblk_end
   110                          __sgoioblk:                     ;stdio control block
   111   000000 0032000000ffff00    defs    CLIB_FOPEN_MAX * 10
                01000000c0ff6800
                0002000013660c00
                0015001600001500
                0000000000000000
                0000000000000000
                0000000000c00000
                40001000a6000000
                0000c00000400011
                00a60000000000c0
                000040001200a600
                00000000c0000040
                001300a6        
   112                          __sgoioblk_end:                 ;end of stdio control block
   113                          ENDIF
   114                          
   115                          IF !DEFINED_basegraphics
   116                              PUBLIC  base_graphics
   117                          base_graphics:
   118   000064 0000                defw    0                   ;Address of graphics map
   119                          ENDIF
   120                              PUBLIC  exitsp
   121                              PUBLIC  exitcount
   122                          exitsp:
   123   000066 0000                defw    0                   ;atexit() stack
   124                          exitcount:
   125   000068 00                  defb    0                   ;Number of atexit() routines
   126                          IF DEFINED_USING_amalloc
   127                              PUBLIC  _heap
   128                              ; The heap pointer will be wiped at bss initialisation.
   129                              ; Its value (based on __tail) will be set later if set
   130                              ; by sbrk() during AMALLOC initialisation.
   131                          _heap:
   132                              defw __BSS_END_tail         ; Initialised by code_crt_init - location of the last program byte
   133                              defw 0
   134                          ENDIF
   135                          
   136                          IF CLIB_BALLOC_TABLE_SIZE > 0
   137                          
   138                              ; create balloc table
   139                              SECTION data_alloc_balloc
   140                              PUBLIC  __balloc_array
   141                          __balloc_array:
   142                              defw __balloc_table
   143                          
   144                              SECTION bss_alloc_balloc
   145                              PUBLIC  __balloc_table
   146                          __balloc_table:
   147                              defs CLIB_BALLOC_TABLE_SIZE * 2
   148                          
   149                          ENDIF
   150                          
/home/jorgegv/src/spectrum/z88dk/lib/config//../..//lib/target/zx/classic/spec_crt0.asm:
   385                          
   386                              SECTION	code_crt_init
   387   00001f 5838                ld      a,@111000       ; White PAPER, black INK
   388   000021 32485c              ld      ($5c48),a       ; BORDCR
   389   000024 008d5c              ld      ($5c8d),a       ; ATTR_P
   390   000027 328f5c              ld      ($5c8f),a       ; ATTR_T
   391                          
   392                              SECTION bss_crt
   393                          IF startup=2
   394                              PUBLIC  romsvc
   395                          _FRAMES:        defs    3
   396                          romsvc:         defs    10  ; Pointer to the end of the sysdefvars
   397                                                      ; used by the ROM version of some library
   398                          ENDIF
   399                          
   400                          
   401                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   402                          ; Define Memory Banks
   403                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   404                          
   405                              IFNDEF CRT_ORG_BANK_0
   406                                  defc CRT_ORG_BANK_0 = 0xc000
   407                              ENDIF
   408                          
   409                              IFNDEF CRT_ORG_BANK_1
   410                                  defc CRT_ORG_BANK_1 = 0xc000
   411                              ENDIF
   412                          
   413                              IFNDEF CRT_ORG_BANK_2
   414                                  defc CRT_ORG_BANK_2 = 0xc000
   415                              ENDIF
   416                          
   417                              IFNDEF CRT_ORG_BANK_3
   418                                  defc CRT_ORG_BANK_3 = 0xc000
   419                              ENDIF
   420                          
   421                              IFNDEF CRT_ORG_BANK_4
   422                                  defc CRT_ORG_BANK_4 = 0xc000
   423                              ENDIF
   424                          
   425                              IFNDEF CRT_ORG_BANK_5
   426                                  defc CRT_ORG_BANK_5 = 0xc000
   427                              ENDIF
   428                          
   429                              IFNDEF CRT_ORG_BANK_6
   430                                  defc CRT_ORG_BANK_6 = 0xc000
   431                              ENDIF
   432                          
   433                              IFNDEF CRT_ORG_BANK_7
   434                                  defc CRT_ORG_BANK_7 = 0xc000
   435                              ENDIF
   436                          
   437                          
   438                              SECTION BANK_0
   439                              org 0x000000 + CRT_ORG_BANK_0
   440                              SECTION CODE_0
   441                              SECTION RODATA_0
   442                              SECTION DATA_0
   443                              SECTION BSS_0
   444                              SECTION BANK_0_END
   445                          
   446                              SECTION BANK_1
   447                              org 0x010000 + CRT_ORG_BANK_1
   448                              SECTION CODE_1
   449                              SECTION RODATA_1
   450                              SECTION DATA_1
   451                              SECTION BSS_1
   452                              SECTION BANK_1_END
   453                          
   454                              SECTION BANK_2
   455                              org 0x020000 + CRT_ORG_BANK_2
   456                              SECTION CODE_2
   457                              SECTION RODATA_2
   458                              SECTION DATA_2
   459                              SECTION BSS_2
   460                              SECTION BANK_2_END
   461                          
   462                              SECTION BANK_3
   463                              org 0x030000+ CRT_ORG_BANK_3
   464                              SECTION CODE_3
   465                              SECTION RODATA_3
   466                              SECTION DATA_3
   467                              SECTION BSS_3
   468                              SECTION BANK_3_END
   469                          
   470                              SECTION BANK_4
   471                              org 0x040000 + CRT_ORG_BANK_4
   472                              SECTION CODE_4
   473                              SECTION RODATA_4
   474                              SECTION DATA_4
   475                              SECTION BSS_4
   476                              SECTION BANK_4_END
   477                          
   478                              SECTION BANK_5
   479                              org 0x050000 + CRT_ORG_BANK_5
   480                              SECTION CODE_5
   481                              SECTION RODATA_5
   482                              SECTION DATA_5
   483                              SECTION BSS_5
   484                              SECTION BANK_5_END
   485                          
   486                              SECTION BANK_6
   487                              org 0x060000 + CRT_ORG_BANK_6
   488                              SECTION CODE_6
   489                              SECTION RODATA_6
   490                              SECTION DATA_6
   491                              SECTION BSS_6
   492                              SECTION BANK_6_END
   493                          
   494                              SECTION BANK_7
   495                              org 0x070000 + CRT_ORG_BANK_7
   496                              SECTION CODE_7
   497                              SECTION RODATA_7
   498                              SECTION DATA_7
   499                              SECTION BSS_7
   500                              SECTION BANK_7_END
   501                          
